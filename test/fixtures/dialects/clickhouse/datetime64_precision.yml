# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: 66fbc0cb8f897bfef3f278a5903fb6fa305b1c6f102a2d95dcfd0e8841c2218b
file:
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          expression:
            cast_expression:
              quoted_literal: "'2024-01-01'"
              casting_operator: '::'
              data_type:
                data_type_identifier: DateTime64
          alias_expression:
            alias_operator: as
            naked_identifier: datetime
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          expression:
            cast_expression:
              quoted_literal: "'2024-01-01'"
              casting_operator: '::'
              data_type:
                data_type_identifier: DateTime64
                bracketed:
                  start_bracket: (
                  end_bracket: )
          alias_expression:
            alias_operator: as
            naked_identifier: datetime
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          expression:
            cast_expression:
              quoted_literal: "'2024-01-01'"
              casting_operator: '::'
              data_type:
                data_type_identifier: DateTime64
                bracketed:
                  start_bracket: (
                  numeric_literal: '3'
                  end_bracket: )
          alias_expression:
            alias_operator: as
            naked_identifier: datetime
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          expression:
            cast_expression:
              quoted_literal: "'2024-01-01'"
              casting_operator: '::'
              data_type:
                data_type_identifier: DateTime64
                bracketed:
                  start_bracket: (
                  numeric_literal: '3'
                  comma: ','
                  quoted_literal: "'Europe/Paris'"
                  end_bracket: )
          alias_expression:
            alias_operator: as
            naked_identifier: datetime
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          expression:
            cast_expression:
              quoted_literal: "'2024-01-01'"
              casting_operator: '::'
              data_type:
                data_type_identifier: DateTime64
                bracketed:
                  start_bracket: (
                  numeric_literal: '6'
                  end_bracket: )
          alias_expression:
            alias_operator: as
            naked_identifier: datetime
- statement_terminator: ;
