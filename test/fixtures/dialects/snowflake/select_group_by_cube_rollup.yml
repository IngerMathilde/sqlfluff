# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: bf724f41ac7e6234ed59c6e4e78fa9f0751c3fe321e44553f68f8a886cb9614f
file:
- statement:
    select_statement:
      select_clause:
      - keyword: SELECT
      - select_clause_element:
          column_reference:
            naked_identifier: name
      - comma: ','
      - select_clause_element:
          column_reference:
            naked_identifier: age
      - comma: ','
      - select_clause_element:
          function:
            function_name:
              function_name_identifier: count
            function_contents:
              bracketed:
                start_bracket: (
                star: '*'
                end_bracket: )
          alias_expression:
            alias_operator: AS
            naked_identifier: record_count
      from_clause:
        keyword: FROM
        from_expression:
          from_expression_element:
            table_expression:
              table_reference:
                naked_identifier: people
      groupby_clause:
      - keyword: GROUP
      - keyword: BY
      - keyword: CUBE
      - bracketed:
        - start_bracket: (
        - column_reference:
            naked_identifier: name
        - comma: ','
        - column_reference:
            naked_identifier: age
        - end_bracket: )
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
      - keyword: SELECT
      - select_clause_element:
          column_reference:
            naked_identifier: name
      - comma: ','
      - select_clause_element:
          column_reference:
            naked_identifier: age
      - comma: ','
      - select_clause_element:
          function:
            function_name:
              function_name_identifier: count
            function_contents:
              bracketed:
                start_bracket: (
                star: '*'
                end_bracket: )
          alias_expression:
            alias_operator: AS
            naked_identifier: record_count
      from_clause:
        keyword: FROM
        from_expression:
          from_expression_element:
            table_expression:
              table_reference:
                naked_identifier: people
      groupby_clause:
      - keyword: GROUP
      - keyword: BY
      - keyword: ROLLUP
      - bracketed:
        - start_bracket: (
        - column_reference:
            naked_identifier: name
        - comma: ','
        - column_reference:
            naked_identifier: age
        - end_bracket: )
- statement_terminator: ;
