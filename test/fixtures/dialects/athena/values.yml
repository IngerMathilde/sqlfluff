# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: 52ff84735f1489d4a5646b15ac2deb07a89f79036e85645d1806ebfbc5389aaa
file:
- statement:
    values_clause:
    - keyword: VALUES
    - expression:
        numeric_literal: '1'
    - comma: ','
    - expression:
        numeric_literal: '2'
    - comma: ','
    - expression:
        numeric_literal: '3'
- statement_terminator: ;
- statement:
    values_clause:
    - keyword: VALUES
    - expression:
        bracketed:
          start_bracket: (
          numeric_literal: '1'
          comma: ','
          quoted_literal: "'a'"
          end_bracket: )
    - comma: ','
    - expression:
        bracketed:
          start_bracket: (
          numeric_literal: '2'
          comma: ','
          quoted_literal: "'b'"
          end_bracket: )
    - comma: ','
    - expression:
        bracketed:
          start_bracket: (
          numeric_literal: '3'
          comma: ','
          quoted_literal: "'c'"
          end_bracket: )
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          wildcard_expression:
            wildcard_identifier:
              star: '*'
      from_clause:
        keyword: FROM
        from_expression:
          from_expression_element:
            bracketed:
              start_bracket: (
              table_expression:
                values_clause:
                - keyword: VALUES
                - expression:
                    bracketed:
                      start_bracket: (
                      numeric_literal: '1'
                      comma: ','
                      quoted_literal: "'a'"
                      end_bracket: )
                - comma: ','
                - expression:
                    bracketed:
                      start_bracket: (
                      numeric_literal: '2'
                      comma: ','
                      quoted_literal: "'b'"
                      end_bracket: )
                - comma: ','
                - expression:
                    bracketed:
                      start_bracket: (
                      numeric_literal: '3'
                      comma: ','
                      quoted_literal: "'c'"
                      end_bracket: )
              end_bracket: )
            alias_expression:
              alias_expression_operator:
                keyword: AS
              naked_identifier: t
              bracketed:
                start_bracket: (
                identifier_list:
                - naked_identifier: id
                - comma: ','
                - naked_identifier: name
                end_bracket: )
- statement_terminator: ;
- statement:
    create_table_statement:
    - keyword: CREATE
    - keyword: TABLE
    - table_reference:
        naked_identifier: customers
    - keyword: AS
    - select_statement:
        select_clause:
          keyword: SELECT
          select_clause_element:
            wildcard_expression:
              wildcard_identifier:
                star: '*'
        from_clause:
          keyword: FROM
          from_expression:
            from_expression_element:
              bracketed:
                start_bracket: (
                table_expression:
                  values_clause:
                  - keyword: VALUES
                  - expression:
                      bracketed:
                        start_bracket: (
                        numeric_literal: '1'
                        comma: ','
                        quoted_literal: "'a'"
                        end_bracket: )
                  - comma: ','
                  - expression:
                      bracketed:
                        start_bracket: (
                        numeric_literal: '2'
                        comma: ','
                        quoted_literal: "'b'"
                        end_bracket: )
                  - comma: ','
                  - expression:
                      bracketed:
                        start_bracket: (
                        numeric_literal: '3'
                        comma: ','
                        quoted_literal: "'c'"
                        end_bracket: )
                end_bracket: )
              alias_expression:
                alias_expression_operator:
                  keyword: AS
                naked_identifier: t
                bracketed:
                  start_bracket: (
                  identifier_list:
                  - naked_identifier: id
                  - comma: ','
                  - naked_identifier: name
                  end_bracket: )
- statement_terminator: ;
